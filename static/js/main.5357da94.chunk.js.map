{"version":3,"sources":["components/Cell/index.js","components/Board/index.js","components/Footer/Timer/index.js","components/Footer/index.js","components/Puzzle/index.js","app.js","serviceWorker.js","index.js"],"names":["Cell","nextProps","nextState","this","props","value","unit","size","clickHandler","cls","className","onClick","React","Component","Board","findClickables","board","document","body","addEventListener","event","handleKeyPress","removeEventListener","join","keyCode","state","possibleTopIdx","cellClickHandler","possiblBottomIdx","possibleLeftIdx","possiblRightIdx","zeroIndex","indexOf","zeroCoordinate","getCoordFromIndex","row","getIndexFromCoord","column","setState","zero","idx","Math","floor","col","index","updateBoard","direction","slice","temp","squares","docWidth","clientWidth","docHeight","clientHeight","maxWidth","parseInt","maxHeight","map","val","push","key","right","Timer","elapsed","tick","bind","timer","setInterval","clearInterval","done","Date","start","seconds","toFixed","id","style","display","Footer","move","newGame","Puzzle","num","goal","i","shuffle","now","checkDone","every","o","j","x","length","random","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5357da94.chunk.js","sourcesContent":["import React from 'react';\nimport './cell.scss';\n\nclass Cell extends React.Component {\n    shouldComponentUpdate(nextProps, nextState) {\n        if (this.props.value === nextProps.value && this.props.unit === nextProps.unit) {\n            return false;\n        }\n\n        return true;\n    }\n\n    render() {\n        const {value, size, clickHandler, unit} = this.props;\n\n        let cls = `square square-${unit}`\n        cls = value === size*size ? `${cls} zero` : cls;\n\n        return (\n            <span className={cls} onClick={() => {clickHandler()}}>{value}</span>\n        );\n    }\n}\n\nexport default Cell;\n","import React from 'react';\nimport Cell from '../Cell';\n\nclass Board extends React.Component {\n    componentDidMount() {\n        this.findClickables(this.props.board, this.props.size);\n        document.body.addEventListener('keydown', (event) => {this.handleKeyPress(event)});\n    }\n\n    componentWillReceiveProps(nextProps) {\n        this.findClickables(nextProps.board, nextProps.size);\n    }\n\n    componentWillUnmount() {\n        document.body.removeEventListener('keydown', (event) => {this.handleKeyPress(event)})\n    }\n\n    shouldComponentUpdate(nextProps) {\n        const curr = this.props.board.join('');\n        const next = nextProps.board.join('');\n        return curr !== next;\n    }\n\n    handleKeyPress(event) {\n        switch (event.keyCode) {\n            case 40:  // down\n                if (this.state.possibleTopIdx !== null && this.state.possibleTopIdx > -1) {\n                    this.cellClickHandler(this.state.possibleTopIdx)\n                }\n\n                break;\n            case 38:  // up\n                if (this.state.possiblBottomIdx !== null && this.state.possiblBottomIdx > -1) {\n                    this.cellClickHandler(this.state.possiblBottomIdx)\n                }\n\n                break;\n            case 39:  // right\n                if (this.state.possibleLeftIdx !== null && this.state.possibleLeftIdx > -1) {\n                    this.cellClickHandler(this.state.possibleLeftIdx)\n                }\n\n                break;\n            case 37: // left\n                if (this.state.possiblRightIdx !== null && this.state.possiblRightIdx > -1) {\n                    this.cellClickHandler(this.state.possiblRightIdx)\n                }\n\n                break;\n            default:\n                break;\n        }\n    }\n\n    findClickables(board, size) {\n        const zeroIndex = board.indexOf(size*size);\n        const zeroCoordinate = this.getCoordFromIndex(zeroIndex, size);\n        const possibleTopIdx = zeroCoordinate.row > 0 ? this.getIndexFromCoord(zeroCoordinate.row - 1, zeroCoordinate.column, size) : null;\n        const possiblRightIdx = zeroCoordinate.column < size ? this.getIndexFromCoord(zeroCoordinate.row, zeroCoordinate.column + 1, size) : null;\n        const possiblBottomIdx = zeroCoordinate.row < size ? this.getIndexFromCoord(zeroCoordinate.row + 1, zeroCoordinate.column, size) : null;\n        const possibleLeftIdx = zeroCoordinate.column > 1 ? this.getIndexFromCoord(zeroCoordinate.row, zeroCoordinate.column - 1, size) : null;\n\n        this.setState({\n            zero: zeroIndex,\n            possibleTopIdx: possibleTopIdx,\n            possiblRightIdx: possiblRightIdx,\n            possiblBottomIdx: possiblBottomIdx,\n            possibleLeftIdx: possibleLeftIdx\n        });\n    }\n\n    getCoordFromIndex(idx, size) {\n        return {row: Math.floor(idx / size) + 1, column: (idx % size) + 1};\n    }\n\n    getIndexFromCoord(row, col, size) {\n        return (size * (row - 1)) + col - 1;\n    }\n\n    cellClickHandler(index) {\n        if (index === this.state.possibleTopIdx ||\n            index === this.state.possiblRightIdx ||\n            index === this.state.possiblBottomIdx ||\n            index === this.state.possibleLeftIdx\n        ) {\n            this.updateBoard(index);\n        }\n    }\n\n    updateBoard(index, direction) {\n        const board = this.props.board.slice();\n        const temp = board[index];\n        board[index] = board[this.state.zero];\n        board[this.state.zero] = temp;\n        this.props.updateBoard(board);\n    }\n\n    render() {\n        const size = this.props.size;\n        let squares = [];\n\n        let docWidth = document.body.clientWidth,\n            docHeight = document.body.clientHeight;\n        const maxWidth = parseInt(docWidth / size) - 10,\n            maxHeight = parseInt((docHeight - 200) / size),\n            unit = maxHeight > maxWidth ? maxWidth : maxHeight;\n\n        this.props.board.map((val, index) => {\n            squares.push(\n                <Cell\n                    key={index}\n                    value={val}\n                    size={size}\n                    clickHandler={() => this.cellClickHandler(index)}\n                    right={index+1 === val}\n                    unit={unit}\n                />\n            );\n\n            if ((index + 1) % size === 0) {\n                squares.push(<br key={`br_${index}`} />)\n            }\n        });\n\n        return (\n            <div className='board'>\n                {squares}\n            </div>\n        );\n    }\n}\n\nexport default Board;\n","import React from 'react';\n\nclass Timer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            elapsed: 0\n        }\n\n        this.tick = this.tick.bind(this);\n    }\n\n    componentDidMount() {\n        this.timer = setInterval(this.tick, 50);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.timer);\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.done) {\n            clearInterval(this.timer);\n        }\n\n        if (!nextProps.done && this.props.done) {\n            this.timer = setInterval(this.tick, 50);\n        }\n    }\n\n    tick() {\n        this.setState({elapsed: new Date() - this.props.start});\n    }\n\n    render() {\n        const seconds = (this.state.elapsed / 1000).toFixed(3);\n        return (\n            <span>\n                Time: {parseInt(seconds)}s\n                <span id=\"result\" style={{display: 'none'}}>{seconds}</span>\n            </span>\n        );\n    }\n}\n\nexport default Timer;\n","import React from 'react';\nimport Timer from './Timer';\nimport './footer.scss';\n\nconst Footer = ({move, newGame, start, done}) => {\n    return (\n        <div className=\"puzzle-footer\">\n            <div className=\"move\">\n                <span>Move: {move}</span>\n                <Timer start={start} done={done} />\n            </div>\n            <span className=\"button\" onClick={() => newGame(3)}>3x3</span>\n            <span className=\"button\" onClick={() => newGame(4)}>4x4</span>\n            <span className=\"button\" onClick={() => newGame(5)}>5x5</span>\n            <span className=\"button\" onClick={() => newGame(6)}>6x6</span>\n            <span className=\"button\" onClick={() => newGame(7)}>7x7</span>\n            <span className=\"button\" onClick={() => newGame(8)}>8x8</span>\n            <span className=\"button\" onClick={() => newGame(9)}>9x9</span>\n            <span className=\"button\" onClick={() => newGame(10)}>10x10</span>\n        </div>\n    );\n}\n\nexport default Footer;\n","import React from 'react';\nimport Board from '../Board';\nimport Footer from '../Footer'\nimport './puzzle.scss';\n\nclass Puzzle extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            board: [1, 2, 3, 4, 5, 6, 7, 8, 0],\n            size: 3,\n            move: 0,\n            done: false\n        };\n    }\n\n    componentDidMount() {\n        this.newGame(this.state.size);\n    }\n\n    newGame(size) {\n        const num = size * size;\n        let goal = [];\n        for (let i = 1; i <= num; i++) goal.push(i);\n\n        const board = this.shuffle(goal);\n        this.setState({ size, board, goal, move: 0, done: false, start: Date.now()});\n    }\n\n    updateBoard(board) {\n        if (!this.state.done) {\n            let move = this.state.move;\n            this.setState({ board, move: move + 1 }, () => {\n                this.setState({done: this.checkDone()});\n            });\n        }\n    }\n\n    checkDone() {\n        const board = this.state.board,\n            goal = this.state.goal;\n\n        return goal.every((value, index) => value === board[index]);\n    }\n\n    shuffle(o) {\n        const temp = o.slice();\n        for (let j, x, i = temp.length; i; j = Math.floor(Math.random() * i), x = temp[--i], temp[i] = temp[j], temp[j] = x);\n        return temp;\n    }\n\n    render() {\n        return (\n            <div className='puzzle'>\n                <div className=\"puzzle-header\">\n                    {this.state.done ? <h3>You won!</h3> : ''}\n                </div>\n                <div className=\"puzzle-body\">\n                    {this.state && this.state.board ?\n                        <Board\n                            size={this.state.size}\n                            board={this.state.board}\n                            updateBoard={this.updateBoard.bind(this)}\n                        />\n                        : null\n                    }\n                </div>\n                <Footer\n                    move={this.state.move}\n                    start={this.state.start}\n                    done={this.state.done}\n                    newGame={this.newGame.bind(this)}\n                />\n            </div>\n        );\n    }\n}\n\nexport default Puzzle;\n","import React from 'react';\nimport Puzzle from './components/Puzzle';\n\nimport './app.scss';\n\nexport default class App extends React.Component {\n    render () {\n        return (\n            <div className=\"app__content\">\n                <div className=\"app__header\">\n                </div>\n                <div className=\"app__body\">\n                    <Puzzle />\n                </div>\n            </div>\n        )\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nimport './app.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}